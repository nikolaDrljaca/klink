/* tslint:disable */
/* eslint-disable */
/**
 * Book API
 * A simple API to manage books
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Book,
  NewBook,
} from '../models/index';
import {
    BookFromJSON,
    BookToJSON,
    NewBookFromJSON,
    NewBookToJSON,
} from '../models/index';

export interface AddBookRequest {
    newBook: NewBook;
}

/**
 * 
 */
export class BooksApi extends runtime.BaseAPI {

    /**
     * Add a new book
     */
    async addBookRaw(requestParameters: AddBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['newBook'] == null) {
            throw new runtime.RequiredError(
                'newBook',
                'Required parameter "newBook" was null or undefined when calling addBook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/books`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewBookToJSON(requestParameters['newBook']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a new book
     */
    async addBook(requestParameters: AddBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addBookRaw(requestParameters, initOverrides);
    }

    /**
     * Get list of all books
     */
    async getBooksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Book>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/books`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BookFromJSON));
    }

    /**
     * Get list of all books
     */
    async getBooks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Book>> {
        const response = await this.getBooksRaw(initOverrides);
        return await response.value();
    }

}
