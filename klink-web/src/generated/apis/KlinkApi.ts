/* tslint:disable */
/* eslint-disable */
/**
 * Klink API
 * API to manage Klinks
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateKlinkPayload,
  Klink,
} from '../models/index';
import {
    CreateKlinkPayloadFromJSON,
    CreateKlinkPayloadToJSON,
    KlinkFromJSON,
    KlinkToJSON,
} from '../models/index';

export interface CreateKlinkRequest {
    createKlinkPayload: CreateKlinkPayload;
}

export interface DeleteKlinkRequest {
    klinkId: string;
}

export interface GetKlinkRequest {
    klinkId: string;
}

export interface SyncKlinkRequest {
    klinkId: string;
    klink: Klink;
}

/**
 * 
 */
export class KlinkApi extends runtime.BaseAPI {

    /**
     * Create a new Klink.
     */
    async createKlinkRaw(requestParameters: CreateKlinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createKlinkPayload'] == null) {
            throw new runtime.RequiredError(
                'createKlinkPayload',
                'Required parameter "createKlinkPayload" was null or undefined when calling createKlink().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/klink`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateKlinkPayloadToJSON(requestParameters['createKlinkPayload']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new Klink.
     */
    async createKlink(requestParameters: CreateKlinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createKlinkRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a klink by id.
     */
    async deleteKlinkRaw(requestParameters: DeleteKlinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['klinkId'] == null) {
            throw new runtime.RequiredError(
                'klinkId',
                'Required parameter "klinkId" was null or undefined when calling deleteKlink().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/klink/{klinkId}`.replace(`{${"klinkId"}}`, encodeURIComponent(String(requestParameters['klinkId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a klink by id.
     */
    async deleteKlink(requestParameters: DeleteKlinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteKlinkRaw(requestParameters, initOverrides);
    }

    /**
     * Get a klink by id.
     */
    async getKlinkRaw(requestParameters: GetKlinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Klink>> {
        if (requestParameters['klinkId'] == null) {
            throw new runtime.RequiredError(
                'klinkId',
                'Required parameter "klinkId" was null or undefined when calling getKlink().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/klink/{klinkId}`.replace(`{${"klinkId"}}`, encodeURIComponent(String(requestParameters['klinkId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KlinkFromJSON(jsonValue));
    }

    /**
     * Get a klink by id.
     */
    async getKlink(requestParameters: GetKlinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Klink> {
        const response = await this.getKlinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Syncrhonize collection by id.
     */
    async syncKlinkRaw(requestParameters: SyncKlinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['klinkId'] == null) {
            throw new runtime.RequiredError(
                'klinkId',
                'Required parameter "klinkId" was null or undefined when calling syncKlink().'
            );
        }

        if (requestParameters['klink'] == null) {
            throw new runtime.RequiredError(
                'klink',
                'Required parameter "klink" was null or undefined when calling syncKlink().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/klink/{klinkId}/sync`.replace(`{${"klinkId"}}`, encodeURIComponent(String(requestParameters['klinkId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KlinkToJSON(requestParameters['klink']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Syncrhonize collection by id.
     */
    async syncKlink(requestParameters: SyncKlinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.syncKlinkRaw(requestParameters, initOverrides);
    }

}
