/* tslint:disable */
/* eslint-disable */
/**
 * Klink API
 * API to manage Klinks
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateKlinkPayload,
  Klink,
  KlinkEntry,
  KlinkSyncStatus,
  PatchKlinkPayload,
  QueryExistingPayload,
} from '../models/index';
import {
    CreateKlinkPayloadFromJSON,
    CreateKlinkPayloadToJSON,
    KlinkFromJSON,
    KlinkToJSON,
    KlinkEntryFromJSON,
    KlinkEntryToJSON,
    KlinkSyncStatusFromJSON,
    KlinkSyncStatusToJSON,
    PatchKlinkPayloadFromJSON,
    PatchKlinkPayloadToJSON,
    QueryExistingPayloadFromJSON,
    QueryExistingPayloadToJSON,
} from '../models/index';

export interface CreateKlinkRequest {
    createKlinkPayload: CreateKlinkPayload;
}

export interface CreateKlinkEntryRequest {
    klinkId: string;
    readKey: string;
    writeKey: string;
    klinkEntry: Array<KlinkEntry>;
}

export interface DeleteKlinkRequest {
    klinkId: string;
    readKey: string;
    writeKey: string;
}

export interface GetKlinkRequest {
    klinkId: string;
    readKey: string;
    writeKey?: string;
}

export interface QueryExistingRequest {
    queryExistingPayload: QueryExistingPayload;
}

export interface SyncKlinkRequest {
    klinkId: string;
    klink: Klink;
}

export interface UpdateKlinkRequest {
    klinkId: string;
    readKey: string;
    writeKey: string;
    patchKlinkPayload: PatchKlinkPayload;
}

/**
 * 
 */
export class KlinkApi extends runtime.BaseAPI {

    /**
     * Create a new Klink.
     */
    async createKlinkRaw(requestParameters: CreateKlinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Klink>> {
        if (requestParameters['createKlinkPayload'] == null) {
            throw new runtime.RequiredError(
                'createKlinkPayload',
                'Required parameter "createKlinkPayload" was null or undefined when calling createKlink().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/klink`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateKlinkPayloadToJSON(requestParameters['createKlinkPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KlinkFromJSON(jsonValue));
    }

    /**
     * Create a new Klink.
     */
    async createKlink(requestParameters: CreateKlinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Klink> {
        const response = await this.createKlinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new entry to a Klink.
     */
    async createKlinkEntryRaw(requestParameters: CreateKlinkEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['klinkId'] == null) {
            throw new runtime.RequiredError(
                'klinkId',
                'Required parameter "klinkId" was null or undefined when calling createKlinkEntry().'
            );
        }

        if (requestParameters['readKey'] == null) {
            throw new runtime.RequiredError(
                'readKey',
                'Required parameter "readKey" was null or undefined when calling createKlinkEntry().'
            );
        }

        if (requestParameters['writeKey'] == null) {
            throw new runtime.RequiredError(
                'writeKey',
                'Required parameter "writeKey" was null or undefined when calling createKlinkEntry().'
            );
        }

        if (requestParameters['klinkEntry'] == null) {
            throw new runtime.RequiredError(
                'klinkEntry',
                'Required parameter "klinkEntry" was null or undefined when calling createKlinkEntry().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['readKey'] != null) {
            queryParameters['readKey'] = requestParameters['readKey'];
        }

        if (requestParameters['writeKey'] != null) {
            queryParameters['writeKey'] = requestParameters['writeKey'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/klink/{klinkId}/entries`.replace(`{${"klinkId"}}`, encodeURIComponent(String(requestParameters['klinkId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['klinkEntry']!.map(KlinkEntryToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a new entry to a Klink.
     */
    async createKlinkEntry(requestParameters: CreateKlinkEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createKlinkEntryRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a klink by id.
     */
    async deleteKlinkRaw(requestParameters: DeleteKlinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['klinkId'] == null) {
            throw new runtime.RequiredError(
                'klinkId',
                'Required parameter "klinkId" was null or undefined when calling deleteKlink().'
            );
        }

        if (requestParameters['readKey'] == null) {
            throw new runtime.RequiredError(
                'readKey',
                'Required parameter "readKey" was null or undefined when calling deleteKlink().'
            );
        }

        if (requestParameters['writeKey'] == null) {
            throw new runtime.RequiredError(
                'writeKey',
                'Required parameter "writeKey" was null or undefined when calling deleteKlink().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['readKey'] != null) {
            queryParameters['readKey'] = requestParameters['readKey'];
        }

        if (requestParameters['writeKey'] != null) {
            queryParameters['writeKey'] = requestParameters['writeKey'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/klink/{klinkId}`.replace(`{${"klinkId"}}`, encodeURIComponent(String(requestParameters['klinkId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a klink by id.
     */
    async deleteKlink(requestParameters: DeleteKlinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteKlinkRaw(requestParameters, initOverrides);
    }

    /**
     * Get a klink by id.
     */
    async getKlinkRaw(requestParameters: GetKlinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Klink>> {
        if (requestParameters['klinkId'] == null) {
            throw new runtime.RequiredError(
                'klinkId',
                'Required parameter "klinkId" was null or undefined when calling getKlink().'
            );
        }

        if (requestParameters['readKey'] == null) {
            throw new runtime.RequiredError(
                'readKey',
                'Required parameter "readKey" was null or undefined when calling getKlink().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['readKey'] != null) {
            queryParameters['readKey'] = requestParameters['readKey'];
        }

        if (requestParameters['writeKey'] != null) {
            queryParameters['writeKey'] = requestParameters['writeKey'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/klink/{klinkId}`.replace(`{${"klinkId"}}`, encodeURIComponent(String(requestParameters['klinkId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KlinkFromJSON(jsonValue));
    }

    /**
     * Get a klink by id.
     */
    async getKlink(requestParameters: GetKlinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Klink> {
        const response = await this.getKlinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query existing klinks by ID.
     */
    async queryExistingRaw(requestParameters: QueryExistingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Klink>>> {
        if (requestParameters['queryExistingPayload'] == null) {
            throw new runtime.RequiredError(
                'queryExistingPayload',
                'Required parameter "queryExistingPayload" was null or undefined when calling queryExisting().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/klink/queryExisting`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QueryExistingPayloadToJSON(requestParameters['queryExistingPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(KlinkFromJSON));
    }

    /**
     * Query existing klinks by ID.
     */
    async queryExisting(requestParameters: QueryExistingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Klink>> {
        const response = await this.queryExistingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Synchronize a collection by ID.
     */
    async syncKlinkRaw(requestParameters: SyncKlinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KlinkSyncStatus>> {
        if (requestParameters['klinkId'] == null) {
            throw new runtime.RequiredError(
                'klinkId',
                'Required parameter "klinkId" was null or undefined when calling syncKlink().'
            );
        }

        if (requestParameters['klink'] == null) {
            throw new runtime.RequiredError(
                'klink',
                'Required parameter "klink" was null or undefined when calling syncKlink().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/klink/{klinkId}/sync`.replace(`{${"klinkId"}}`, encodeURIComponent(String(requestParameters['klinkId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KlinkToJSON(requestParameters['klink']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KlinkSyncStatusFromJSON(jsonValue));
    }

    /**
     * Synchronize a collection by ID.
     */
    async syncKlink(requestParameters: SyncKlinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KlinkSyncStatus> {
        const response = await this.syncKlinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a klink by id.
     */
    async updateKlinkRaw(requestParameters: UpdateKlinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Klink>> {
        if (requestParameters['klinkId'] == null) {
            throw new runtime.RequiredError(
                'klinkId',
                'Required parameter "klinkId" was null or undefined when calling updateKlink().'
            );
        }

        if (requestParameters['readKey'] == null) {
            throw new runtime.RequiredError(
                'readKey',
                'Required parameter "readKey" was null or undefined when calling updateKlink().'
            );
        }

        if (requestParameters['writeKey'] == null) {
            throw new runtime.RequiredError(
                'writeKey',
                'Required parameter "writeKey" was null or undefined when calling updateKlink().'
            );
        }

        if (requestParameters['patchKlinkPayload'] == null) {
            throw new runtime.RequiredError(
                'patchKlinkPayload',
                'Required parameter "patchKlinkPayload" was null or undefined when calling updateKlink().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['readKey'] != null) {
            queryParameters['readKey'] = requestParameters['readKey'];
        }

        if (requestParameters['writeKey'] != null) {
            queryParameters['writeKey'] = requestParameters['writeKey'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/klink/{klinkId}`.replace(`{${"klinkId"}}`, encodeURIComponent(String(requestParameters['klinkId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchKlinkPayloadToJSON(requestParameters['patchKlinkPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KlinkFromJSON(jsonValue));
    }

    /**
     * Update a klink by id.
     */
    async updateKlink(requestParameters: UpdateKlinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Klink> {
        const response = await this.updateKlinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
